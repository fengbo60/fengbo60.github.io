<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My Dream Will Come True</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-05T05:11:40.731Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>轻就要对味</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SQL SERVER 连接进程查看</title>
    <link href="http://yoursite.com/2019/12/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E8%BF%9B%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/12/05/数据库连接进程/</id>
    <published>2019-12-05T05:04:00.000Z</published>
    <updated>2019-12-05T05:11:40.731Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SQLServer-中的SYSPROCESSES表"><a href="#SQLServer-中的SYSPROCESSES表" class="headerlink" title="SQLServer 中的SYSPROCESSES表"></a>SQLServer 中的SYSPROCESSES表</h2><p>性能测试的时候对SQLserver DB中的CPU，io，内存进行监控</p><p>可以通过系统进程表查看资源使用情况</p><p>注意要有master权限</p><p>select top 10 * from SYSPROCESSES order by cpu desc<br>select top 10 * from SYSPROCESSES order by physical_io desc<br>select top 10 * from SYSPROCESSES order by memusage desc</p><p>Status：进程ID 状态<br>dormant = 正在重置回话 ;<br>running = 回话正在运行一个或多个批处理 ;<br>background = 回话正在运行一个后台任务 ;<br>rollback = 会话正在处理事务回滚 ;<br>pending = 回话正在等待工作现成变为可用 ;<br>runnable = 会话中的任务在等待获取 Scheduler 来运行的可执行队列中 ;<br>spinloop = 会话中的任务正在等待自旋锁变为可用 ;<br>suspended = 会话正在等待事件完成</p><p>该表用到的具体含义</p><p><img src="https://fengbo60.github.io/images/SYSPROCESSES.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      SQL SERVER 连接进程详细信息查看
    
    </summary>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>TCP HTTP SOCKET WEBSOCKE 原理</title>
    <link href="http://yoursite.com/2019/11/05/TCP%20HTTP%20WEBOCKET/"/>
    <id>http://yoursite.com/2019/11/05/TCP HTTP WEBOCKET/</id>
    <published>2019-11-05T04:10:00.000Z</published>
    <updated>2019-11-06T06:00:45.553Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网络七层协议"><a href="#网络七层协议" class="headerlink" title="网络七层协议"></a>网络七层协议</h2><p>​    </p><p>物理层:中继器、集线器。</p><p>数据链路层:网桥(局域网两个网段隔离，提高通信效率)。</p><p>​                     交换机(每台pc与交换机直连)。</p><p>网络层:ICMP(intenet control message protocol 网络控制信息协议)  用于发送差错报文协议(ping 用到此协议)。</p><p>​            ARP(address resolution protocol 地址解析协议)ip地址到物理地址之间的转化(mac地址)。</p><p>​            RARP(Reverse Address Resolution Protocol 反向地址转换协议)物理地址到ip地址之间的转化。</p><p>传输层:Tcp 面向连接 3次握手 4次挥手 可靠的数据传输服务，牺牲通信量实现。</p><p>​             Udp 面向无连接 提高传输的高速效率。</p><p>​             socket 应用层和传输层事件的协议。</p><p>  会话层:</p><p>   表示层:</p><p>   应用层:HTTP FTP等一些协议。</p><h2 id="HTTP与WebSocket"><a href="#HTTP与WebSocket" class="headerlink" title="HTTP与WebSocket"></a>HTTP与WebSocket</h2><p>  相同点:1. 都是一样基于TCP的，都是可靠性传输协议。2. 都是应用层协议。</p><p>  不同点:http是响应式的应答请求,只有向服务器发送请求，服务器才想客户端推送数据，服务器不会主动向客户端推送数据；websocket是双向通信，服务器可以主动的想客户端推送信息，websocket是模式socket协议 双方都可以主动的发送和被动的接受数据</p><p>下图是websocket链路升级的一次握手包如下：</p><p>客户端发送设计报文:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /webfin/websocket/ HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Key: xqBt3ImNzJbYqRINxEFlkg==</span><br><span class="line">Origin: </span><br><span class="line">http://localhost</span><br><span class="line">:8080</span><br><span class="line">Sec-WebSocket-Version: 13</span><br></pre></td></tr></table></figure><p>服务端响应报文</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 101 Switching Protocols</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Accept: K7DJLdLooIwIG/MOpvWFB3y3FE8=</span><br></pre></td></tr></table></figure><h2 id="WebSocket与Socket"><a href="#WebSocket与Socket" class="headerlink" title="WebSocket与Socket"></a>WebSocket与Socket</h2><p>相同点：都是基于TCP协议基础上的协议，都是双向通信</p><p>不同点:websocket 工作在应用层上面的协议，socket是应用层和传输层之间的协议</p><h2 id="TCP协议怎样兼容websocket协议"><a href="#TCP协议怎样兼容websocket协议" class="headerlink" title="TCP协议怎样兼容websocket协议"></a>TCP协议怎样兼容websocket协议</h2><p>   做一个代理服务器将websocket的通信变成tcp通信代码如下(go 语言)</p><p>​            </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"io"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"net"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"bufio"</span></span><br><span class="line">    <span class="string">"bytes"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">    <span class="string">"crypto/sha1"</span></span><br><span class="line">    <span class="string">"runtime"</span></span><br><span class="line">    <span class="string">"encoding/base64"</span></span><br><span class="line">    <span class="string">"encoding/binary"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> WebSocket <span class="keyword">struct</span> &#123;</span><br><span class="line">    Listener    net.Listener</span><br><span class="line">    Clients        []*Client</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> new_addr <span class="keyword">string</span></span><br><span class="line"><span class="keyword">type</span> Client <span class="keyword">struct</span> &#123;</span><br><span class="line">    Conn         net.Conn</span><br><span class="line">    Nickname    <span class="keyword">string</span></span><br><span class="line">    Shook        <span class="keyword">bool</span></span><br><span class="line">    Server        *WebSocket</span><br><span class="line">    Id            <span class="keyword">int</span></span><br><span class="line">    TcpConn      net.Conn</span><br><span class="line">    WebsocketType   <span class="keyword">int</span></span><br><span class="line">    Num             <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Msg <span class="keyword">struct</span> &#123;</span><br><span class="line">    Data        <span class="keyword">string</span></span><br><span class="line">    Num            <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(self *Client)</span> <span class="title">Release</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// release all connect</span></span><br><span class="line">    self.TcpConn.Close()</span><br><span class="line">    self.Conn.Close()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(self *Client)</span> <span class="title">Handle</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> self.Release()</span><br><span class="line">    <span class="keyword">if</span> !self.Handshake() &#123;</span><br><span class="line">        <span class="comment">// handshak err , del this conn</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// connect to another server for tcp</span></span><br><span class="line">    <span class="keyword">if</span> !self.ConnTcpServer()&#123;</span><br><span class="line">        <span class="comment">// can not connect to the other server , release</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    num = num + <span class="number">1</span></span><br><span class="line">    log.Print(<span class="string">"now connect num : "</span>, num)</span><br><span class="line">    self.Num = num</span><br><span class="line">    <span class="keyword">go</span> self.Read()</span><br><span class="line">    self.ReadTcp()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(self *Client)</span> <span class="title">Read</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> (</span><br><span class="line">        buf     []<span class="keyword">byte</span></span><br><span class="line">        err     error</span><br><span class="line">        rsv     <span class="keyword">byte</span></span><br><span class="line">        opcode    <span class="keyword">byte</span></span><br><span class="line">        mask    <span class="keyword">byte</span></span><br><span class="line">        mKey    []<span class="keyword">byte</span></span><br><span class="line">        length    <span class="keyword">uint64</span></span><br><span class="line">        l        <span class="keyword">uint16</span></span><br><span class="line">        payload    <span class="keyword">byte</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        buf = <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">2</span>)</span><br><span class="line">        _, err = io.ReadFull(self.Conn, buf)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            self.Release()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//fin = buf[0] &gt;&gt; 7</span></span><br><span class="line">        <span class="comment">//if fin == 0 &#123;</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">        rsv = (buf[<span class="number">0</span>] &gt;&gt;<span class="number">4</span>) &amp;<span class="number">0x7</span></span><br><span class="line">        <span class="comment">// which must be 0</span></span><br><span class="line">        <span class="keyword">if</span> rsv != <span class="number">0</span>&#123;</span><br><span class="line">            log.Print(<span class="string">"Client send err msg:"</span>,rsv,<span class="string">", disconnect it"</span>)</span><br><span class="line">            self.Release()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        opcode = buf[<span class="number">0</span>] &amp; <span class="number">0xf</span></span><br><span class="line">        <span class="comment">// opcode   if 8 then disconnect</span></span><br><span class="line">        <span class="keyword">if</span> opcode == <span class="number">8</span> &#123;</span><br><span class="line">            log.Print(<span class="string">"CLient want close Connection"</span>)</span><br><span class="line">            self.Release()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// should save the opcode </span></span><br><span class="line">        <span class="comment">// if client send by binary should return binary (especially for Egret)</span></span><br><span class="line">        self.WebsocketType = <span class="keyword">int</span>(opcode)</span><br><span class="line"></span><br><span class="line">        mask = buf[<span class="number">1</span>] &gt;&gt; <span class="number">7</span></span><br><span class="line">        <span class="comment">// the translate may have mask </span></span><br><span class="line"></span><br><span class="line">        payload = buf[<span class="number">1</span>] &amp; <span class="number">0x7f</span></span><br><span class="line">        <span class="comment">// if length &lt; 126 then payload mean the length</span></span><br><span class="line">        <span class="comment">// if length == 126 then the next 8bit mean the length</span></span><br><span class="line">        <span class="comment">// if length == 127 then the next 64bit mean the length</span></span><br><span class="line">        <span class="keyword">switch</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> payload &lt; <span class="number">126</span>:</span><br><span class="line">            length = <span class="keyword">uint64</span>(payload)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> payload == <span class="number">126</span>:</span><br><span class="line">            buf = <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">2</span>)</span><br><span class="line">            io.ReadFull(self.Conn, buf)</span><br><span class="line">            binary.Read(bytes.NewReader(buf), binary.BigEndian, &amp;l)</span><br><span class="line">            length = <span class="keyword">uint64</span>(l)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> payload == <span class="number">127</span>:</span><br><span class="line">            buf = <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">8</span>)</span><br><span class="line">            io.ReadFull(self.Conn, buf)</span><br><span class="line">            binary.Read(bytes.NewReader(buf), binary.BigEndian, &amp;length)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> mask == <span class="number">1</span> &#123;</span><br><span class="line">            mKey = <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">4</span>)</span><br><span class="line">            io.ReadFull(self.Conn, mKey)</span><br><span class="line">        &#125;</span><br><span class="line">        buf = <span class="built_in">make</span>([]<span class="keyword">byte</span>, length)</span><br><span class="line">        io.ReadFull(self.Conn, buf)</span><br><span class="line">        <span class="keyword">if</span> mask == <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> i, v := <span class="keyword">range</span> buf &#123;</span><br><span class="line">                buf[i] = v ^ mKey[i % <span class="number">4</span>]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//fmt.Print("mask", mKey)</span></span><br><span class="line">        &#125;</span><br><span class="line">        log.Print(<span class="string">"rec from the client("</span>,self.Num,<span class="string">")"</span>, <span class="keyword">string</span>(buf))</span><br><span class="line">        self.TcpConn.Write(buf)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// read from other tcp</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(self *Client)</span> <span class="title">ReadTcp</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> (</span><br><span class="line">        buf  []<span class="keyword">byte</span></span><br><span class="line">    )</span><br><span class="line">    buf = <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        length,err := self.TcpConn.Read(buf)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            self.Release()</span><br><span class="line">            num = num - <span class="number">1</span></span><br><span class="line">            <span class="comment">// only </span></span><br><span class="line">            log.Print(<span class="string">"other tcp connect err"</span>, err)</span><br><span class="line">            log.Print(<span class="string">"disconnect client :"</span>, self.Num)</span><br><span class="line">            log.Print(<span class="string">"now have:"</span>, num)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        log.Print(<span class="string">"recv from other tcp : "</span>, <span class="keyword">string</span>(buf[:length]))</span><br><span class="line">        self.Write(buf[:length])</span><br><span class="line">        <span class="comment">//Write to websocket</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// write to websocket</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(self *Client)</span> <span class="title">Write</span><span class="params">(data []<span class="keyword">byte</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    data_binary := <span class="built_in">new</span>(bytes.Buffer) <span class="comment">//which </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//should be binary or string</span></span><br><span class="line">    frame := []<span class="keyword">byte</span>&#123;<span class="number">129</span>&#125;  <span class="comment">//string</span></span><br><span class="line">    length := <span class="built_in">len</span>(data)</span><br><span class="line">    <span class="comment">// 10000001</span></span><br><span class="line">    <span class="keyword">if</span> self.WebsocketType == <span class="number">2</span> &#123;</span><br><span class="line">        frame = []<span class="keyword">byte</span>&#123;<span class="number">130</span>&#125;</span><br><span class="line">        <span class="comment">// 10000010</span></span><br><span class="line">        err := binary.Write(data_binary, binary.LittleEndian, data)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Print(<span class="string">" translate to binary err"</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line">        length = <span class="built_in">len</span>(data_binary.Bytes())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> length &lt; <span class="number">126</span>:</span><br><span class="line">        frame = <span class="built_in">append</span>(frame, <span class="keyword">byte</span>(length))</span><br><span class="line">    <span class="keyword">case</span> length &lt;= <span class="number">0xffff</span>:</span><br><span class="line">        buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">2</span>)</span><br><span class="line">        binary.BigEndian.PutUint16(buf, <span class="keyword">uint16</span>(length))</span><br><span class="line">        frame = <span class="built_in">append</span>(frame, <span class="keyword">byte</span>(<span class="number">126</span>))</span><br><span class="line">        frame = <span class="built_in">append</span>(frame, buf...)</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">uint64</span>(length) &lt;= <span class="number">0xffffffffffffffff</span>:</span><br><span class="line">        buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">8</span>)</span><br><span class="line">        binary.BigEndian.PutUint64(buf, <span class="keyword">uint64</span>(length))</span><br><span class="line">        frame = <span class="built_in">append</span>(frame, <span class="keyword">byte</span>(<span class="number">127</span>))</span><br><span class="line">        frame = <span class="built_in">append</span>(frame, buf...)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        log.Print(<span class="string">"Data too large"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> self.WebsocketType == <span class="number">2</span> &#123;</span><br><span class="line">        frame = <span class="built_in">append</span>(frame, data_binary.Bytes()...)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        frame = <span class="built_in">append</span>(frame, data...)</span><br><span class="line">    &#125;</span><br><span class="line">    self.Conn.Write(frame)</span><br><span class="line">    frame = []<span class="keyword">byte</span>&#123;<span class="number">0</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(self *Client)</span> <span class="title">ConnTcpServer</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    conn, err := net.Dial(<span class="string">"tcp"</span>, new_addr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(err != <span class="literal">nil</span>) &#123;</span><br><span class="line">        log.Print(<span class="string">"connect other tcp server error"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    self.TcpConn = conn</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(self *Client)</span> <span class="title">Handshake</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> self.Shook &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    reader := bufio.NewReader(self.Conn)</span><br><span class="line">    key := <span class="string">""</span></span><br><span class="line">    str := <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        line, _, err := reader.ReadLine()</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Print(<span class="string">"Handshake err:"</span>,err)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(line) == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        str = <span class="keyword">string</span>(line)</span><br><span class="line">        <span class="keyword">if</span> strings.HasPrefix(str, <span class="string">"Sec-WebSocket-Key"</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(line)&gt;= <span class="number">43</span> &#123;</span><br><span class="line">                key = str[<span class="number">19</span>:<span class="number">43</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> key == <span class="string">""</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    sha := sha1.New()</span><br><span class="line">    io.WriteString(sha, key + <span class="string">"258EAFA5-E914-47DA-95CA-C5AB0DC85B11"</span>)</span><br><span class="line">    key = base64.StdEncoding.EncodeToString(sha.Sum(<span class="literal">nil</span>))</span><br><span class="line">    header := <span class="string">"HTTP/1.1 101 Switching Protocols\r\n"</span> +</span><br><span class="line">    <span class="string">"Connection: Upgrade\r\n"</span> +</span><br><span class="line">    <span class="string">"Sec-WebSocket-Version: 13\r\n"</span> +</span><br><span class="line">    <span class="string">"Sec-WebSocket-Accept: "</span> + key + <span class="string">"\r\n"</span> +</span><br><span class="line"><span class="string">"Sec-WebSocket-Protocol: mqtt"</span>+ <span class="string">"\r\n"</span> +</span><br><span class="line">    <span class="string">"Upgrade: websocket\r\n\r\n"</span></span><br><span class="line">    self.Conn.Write([]<span class="keyword">byte</span>(header))</span><br><span class="line">    self.Shook = <span class="literal">true</span></span><br><span class="line">    self.Server.Clients = <span class="built_in">append</span>(self.Server.Clients, self)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewWebSocket</span><span class="params">(addr <span class="keyword">string</span>)</span> *<span class="title">WebSocket</span></span> &#123;</span><br><span class="line">    l, err := net.Listen(<span class="string">"tcp"</span>, addr)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">        <span class="comment">// if cannot listen then return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &amp;WebSocket&#123;l, <span class="built_in">make</span>([]*Client, <span class="number">0</span>)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(self *WebSocket)</span> <span class="title">Loop</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        conn, err := self.Listener.Accept()</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Print(<span class="string">"client conn err:"</span>, err)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        s := conn.RemoteAddr().String()</span><br><span class="line">        i, _ := strconv.Atoi(strings.Split(s, <span class="string">":"</span>)[<span class="number">1</span>])</span><br><span class="line">        client := &amp;Client&#123;conn, <span class="string">""</span>, <span class="literal">false</span>, self, i, conn, <span class="number">1</span>, num&#125;</span><br><span class="line">        <span class="keyword">go</span> client.Handle()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="comment">// show num of goroutine</span></span><br><span class="line">    w.Header().Set(<span class="string">"Content-Type"</span>, <span class="string">"text/plain"</span>)</span><br><span class="line">    num := strconv.FormatInt(<span class="keyword">int64</span>(runtime.NumGoroutine()), <span class="number">10</span>)</span><br><span class="line">    w.Write([]<span class="keyword">byte</span>(num))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    arg_num:=<span class="built_in">len</span>(os.Args)</span><br><span class="line">    <span class="keyword">if</span> arg_num &lt; <span class="number">2</span> &#123;</span><br><span class="line">        fmt.Println(arg_num)</span><br><span class="line">        fmt.Print(<span class="string">"Wrong Arguments\nxxxx xxx.xxx.xxx.xxx:xxxx\nport ip:port(for tcp)"</span>)</span><br><span class="line">        os.Exit(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    conn,err := net.Dial(<span class="string">"tcp"</span>, <span class="keyword">string</span>(os.Args[<span class="number">2</span>]))</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        os.Exit(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    new_addr = os.Args[<span class="number">2</span>]</span><br><span class="line">    fmt.Println(<span class="string">"Check Arguments Ok"</span>)</span><br><span class="line">    conn.Close()</span><br><span class="line">    port := os.Args[<span class="number">1</span>]</span><br><span class="line">    ip_port:= <span class="string">"0.0.0.0:"</span>+<span class="keyword">string</span>(port)</span><br><span class="line">    ws := NewWebSocket(ip_port)</span><br><span class="line">    <span class="comment">// listen 9051</span></span><br><span class="line">    <span class="keyword">go</span>  ws.Loop()</span><br><span class="line">    fmt.Println(<span class="string">"Start Listen"</span>)</span><br><span class="line">    <span class="comment">// listen 11181 to show num of goroutine</span></span><br><span class="line">    http.HandleFunc(<span class="string">"/mqtt"</span>, handler)</span><br><span class="line">    http.ListenAndServe(<span class="string">":11181"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      TCP HTTP SOCKET WEBSOCKET 协议对比
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>java 线程</title>
    <link href="http://yoursite.com/2019/10/11/Java%20%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/10/11/Java 线程/</id>
    <published>2019-10-11T11:04:40.000Z</published>
    <updated>2019-10-11T11:44:55.807Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-线程"><a href="#Java-线程" class="headerlink" title="Java 线程"></a>Java 线程</h2><p>​    创建线程方法:<br>​               1.继承Thread类创建线程类<br>​                2.实现Runnable接口创建线程类<br>​                3.实现Callable和Future创建线程</p><p>​    线程生命周期:</p><p><img src="https://fengbo60.github.io/images/Thread1.png" alt="img"></p><p>​      控制线程:<br>​           join线程:Thread 提供了让一个线程等待另一个线程完成的方法join()，join()方法通常由适用线程的程序调用<br>​           线程sleep:让当前正在执行的线程暂停一段时间,并进入阻塞状态<br>​            线程让步：yield()方法是一个和sleep()方法有点相似的方法，他也是Thread类提供的一个静态方法，他可以让当前正在执行的线程暂停，但他不会阻塞改线程，他只是让改线程转入就绪状态。</p><p>​    线程同步:</p><p>​          线程同步锁有显示锁(ReentrantLock和隐式锁(synchronized)  显示锁需要手动释放锁古交显示锁</p><p>​    线程通信:</p><pre><code>1.传统的线程通信方式 wait()、notify、notifyAll()2. 使用Condition控制线程通信3. 使用阻塞队列方式</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java-线程&quot;&gt;&lt;a href=&quot;#Java-线程&quot; class=&quot;headerlink&quot; title=&quot;Java 线程&quot;&gt;&lt;/a&gt;Java 线程&lt;/h2&gt;&lt;p&gt;​    创建线程方法:&lt;br&gt;​               1.继承Thread类创建线程类&lt;b
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Oauth2 授权服务器(单点登录)</title>
    <link href="http://yoursite.com/2019/10/09/Oauth2%E6%8E%88%E6%9D%83%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yoursite.com/2019/10/09/Oauth2授权服务器/</id>
    <published>2019-10-09T12:30:00.000Z</published>
    <updated>2019-10-10T03:58:46.902Z</updated>
    
    <content type="html"><![CDATA[<p>本文参考连接为:<a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html</a> 阮一峰大佬</p><h2 id="Oauth2"><a href="#Oauth2" class="headerlink" title="Oauth2"></a>Oauth2</h2><p>​      客户端必须得到用户的授权（authorization grant），才能获得令牌（access token）。OAuth 2.0定义了四种授权方式。</p><ul><li>授权码模式（authorization code）(正宗方式)(支持refresh token)</li><li>简化模式（implicit）(为web浏览器应用设计)(不支持refresh token)</li><li>密码模式（resource owner password credentials）(为遗留系统设计)(支持refresh token)</li><li>客户端模式（client credentials）(为后台api服务消费者设计)(不支持refresh token)</li></ul><h2 id="WebSecurityConfigurerAdapter与ResourceServerConfigurerAdapter区别"><a href="#WebSecurityConfigurerAdapter与ResourceServerConfigurerAdapter区别" class="headerlink" title="WebSecurityConfigurerAdapter与ResourceServerConfigurerAdapter区别"></a>WebSecurityConfigurerAdapter与ResourceServerConfigurerAdapter区别</h2><p>​        </p>]]></content>
    
    <summary type="html">
    
      Oauth2 授权服务器(单点登录)
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>java Reactor详解</title>
    <link href="http://yoursite.com/2019/09/27/Java%20Reactor/"/>
    <id>http://yoursite.com/2019/09/27/Java Reactor/</id>
    <published>2019-09-27T03:43:40.000Z</published>
    <updated>2019-09-27T06:00:52.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NIO与BIO"><a href="#NIO与BIO" class="headerlink" title="NIO与BIO"></a>NIO与BIO</h2><p>BIO: 同步并阻塞，客户端和服务端每个连接需要建立一个thread进行处理，非常的浪费资源</p><p>NIO:同步非阻塞,服务端实现单线程实现所有客户端的连接,客户端的所有连接请求都会注册到多路复用器上，多路复用器(selector))轮询到连接有I/O请求时才启动一个线程进行处理。</p><h2 id="单Reactor-多线程模式"><a href="#单Reactor-多线程模式" class="headerlink" title="单Reactor 多线程模式"></a>单Reactor 多线程模式</h2><p>​        进行读写事件时非常耗时，Reactor执行事件是串行的，导致后面的读写事件非常耗时，所以引入线程池 流程图如下</p><p><img src="https://fengbo60.github.io/images/react_dan.png" alt="img"></p><h2 id="主从Reactor多线程模式"><a href="#主从Reactor多线程模式" class="headerlink" title="主从Reactor多线程模式"></a>主从Reactor多线程模式</h2><p>​         分为mainReactor和subReactor   mainReactor主要处理连接事件  subReactor 主要处理读写事件，这样能够处理更高的并发请求,防止由于读写事件的延迟导致连接事件的延迟，流程图如下:</p><p><img src="https://fengbo60.github.io/images/react_duo.png" alt="img"></p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>​     server:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectorServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> PORT = <span class="number">1234</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 先确定端口号</span></span><br><span class="line">        <span class="keyword">int</span> port = PORT;</span><br><span class="line">        <span class="keyword">if</span> (args != <span class="keyword">null</span> &amp;&amp; args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            port = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 打开一个ServerSocketChannel</span></span><br><span class="line">        ServerSocketChannel ssc = ServerSocketChannel.open();</span><br><span class="line">        <span class="comment">// 获取ServerSocketChannel绑定的Socket</span></span><br><span class="line">        ServerSocket ss = ssc.socket();</span><br><span class="line">        <span class="comment">// 设置ServerSocket监听的端口</span></span><br><span class="line">        ss.bind(<span class="keyword">new</span> InetSocketAddress(port));</span><br><span class="line">        <span class="comment">// 设置ServerSocketChannel为非阻塞模式</span></span><br><span class="line">        ssc.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 打开一个选择器</span></span><br><span class="line">        Selector selector = Selector.open();</span><br><span class="line">        <span class="comment">// 将ServerSocketChannel注册到选择器上去并监听accept事件</span></span><br><span class="line">        ssc.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 这里会发生阻塞，等待就绪的通道</span></span><br><span class="line">            <span class="keyword">int</span> n = selector.select();</span><br><span class="line">            <span class="comment">// 没有就绪的通道则什么也不做</span></span><br><span class="line">            <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取SelectionKeys上已经就绪的通道的集合</span></span><br><span class="line">            Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class="line">            <span class="comment">// 遍历每一个Key</span></span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                SelectionKey sk = iterator.next();</span><br><span class="line">                <span class="comment">// 通道上是否有可接受的连接</span></span><br><span class="line">                <span class="keyword">if</span> (sk.isAcceptable()) &#123;</span><br><span class="line">                    ServerSocketChannel ssc1 = (ServerSocketChannel) sk.channel();</span><br><span class="line">                    SocketChannel sc = ssc1.accept();</span><br><span class="line">                    sc.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">                    sc.register(selector, SelectionKey.OP_READ);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 通道上是否有数据可读</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (sk.isReadable()) &#123;</span><br><span class="line">                    readDataFromSocket(sk);</span><br><span class="line">                &#125;</span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ByteBuffer bb = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从通道中读取数据</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readDataFromSocket</span><span class="params">(SelectionKey sk)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SocketChannel sc = (SocketChannel) sk.channel();</span><br><span class="line">        bb.clear();</span><br><span class="line">        Thread.sleep(<span class="number">1000L</span>);</span><br><span class="line">         <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            count = sc.read(bb);</span><br><span class="line">            <span class="keyword">if</span>(count&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                bb.flip();</span><br><span class="line">                <span class="keyword">while</span> (bb.hasRemaining()) &#123;</span><br><span class="line">                    System.out.print((<span class="keyword">char</span>) bb.get());</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println();</span><br><span class="line">                bb.clear();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(count==-<span class="number">1</span>)&#123;  <span class="comment">//当为-1时表示客户端与服务端已关不连接 如果不加上这个句则通道始终有读的事件写入</span></span><br><span class="line">             <span class="comment">//   sc.close();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// 客户端断开后，需要手动关闭channel</span></span><br><span class="line">            sc.close();</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        while (sc.read(bb) &gt;0) &#123;</span></span><br><span class="line"><span class="comment">//            bb.flip();</span></span><br><span class="line"><span class="comment">//            while (bb.hasRemaining()) &#123;</span></span><br><span class="line"><span class="comment">//                System.out.print((char) bb.get());</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            System.out.println();</span></span><br><span class="line"><span class="comment">//            bb.clear();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>client:</p><p>​    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectorClient</span> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String STR = <span class="string">"Hello World!"</span>;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REMOTE_IP = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THREAD_COUNT = <span class="number">10</span>;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NonBlockingSocketThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span></span><br><span class="line"><span class="class">      </span>&#123;</span><br><span class="line">             <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">             </span>&#123;</span><br><span class="line">                     <span class="keyword">try</span></span><br><span class="line">                    &#123;</span><br><span class="line">                           <span class="keyword">int</span> port = <span class="number">1234</span>;</span><br><span class="line">                           SocketChannel sc = SocketChannel.open();</span><br><span class="line">                            sc.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">                            sc.connect(<span class="keyword">new</span> InetSocketAddress(REMOTE_IP, port));</span><br><span class="line">                           <span class="keyword">while</span> (!sc.finishConnect())</span><br><span class="line">                                &#123;</span><br><span class="line">                                   System.out.println(<span class="string">"同"</span> + REMOTE_IP + <span class="string">"的连接正在建立，请稍等！"</span>);</span><br><span class="line">                                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                        String writeStr = STR + <span class="keyword">this</span>.getName();</span><br><span class="line">                             System.out.println(<span class="string">"连接已建立，待写入内容至指定ip+端口！时间为"</span> +                                        System.currentTimeMillis()+<span class="string">"___"</span>+writeStr);</span><br><span class="line">                           ByteBuffer bb = ByteBuffer.allocate(writeStr.length());</span><br><span class="line">                           bb.put(writeStr.getBytes());</span><br><span class="line">                           bb.flip(); <span class="comment">// 写缓冲区的数据之前一定要先反转(flip)</span></span><br><span class="line"></span><br><span class="line">                          <span class="comment">//  sc.write(bb);</span></span><br><span class="line"></span><br><span class="line">                             <span class="comment">// sc.read(bb);</span></span><br><span class="line"></span><br><span class="line">                            bb.clear();</span><br><span class="line">                            sc.close();</span><br><span class="line">                       &#125;</span><br><span class="line">                    <span class="keyword">catch</span> (IOException e)</span><br><span class="line">                    &#123;</span><br><span class="line">                           e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                   <span class="keyword">catch</span> (InterruptedException e)</span><br><span class="line">                    &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line">           NonBlockingSocketThread[] nbsts = <span class="keyword">new</span> NonBlockingSocketThread[THREAD_COUNT];</span><br><span class="line">             <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; THREAD_COUNT; i++)</span><br><span class="line">                    nbsts[i] = <span class="keyword">new</span> NonBlockingSocketThread();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; THREAD_COUNT; i++)</span><br><span class="line">                   nbsts[i].start();</span><br><span class="line">            <span class="comment">// 一定要join保证线程代码先于sc.close()运行，否则会有AsynchronousCloseException</span></span><br><span class="line">          <span class="comment">//  for (int i = 0; i &lt; THREAD_COUNT; i++)</span></span><br><span class="line">         <span class="comment">//           nbsts[i].join();</span></span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>参考链接：</p><p><a href="https://www.cnblogs.com/hama1993/p/10640067.html和https://github.com/exceting/DemoAll/blob/master/jdk/src/main/java/demo/jdk/reactor/mainsub" target="_blank" rel="noopener">https://www.cnblogs.com/hama1993/p/10640067.html和https://github.com/exceting/DemoAll/blob/master/jdk/src/main/java/demo/jdk/reactor/mainsub</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;NIO与BIO&quot;&gt;&lt;a href=&quot;#NIO与BIO&quot; class=&quot;headerlink&quot; title=&quot;NIO与BIO&quot;&gt;&lt;/a&gt;NIO与BIO&lt;/h2&gt;&lt;p&gt;BIO: 同步并阻塞，客户端和服务端每个连接需要建立一个thread进行处理，非常的浪费资源&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>java String详解</title>
    <link href="http://yoursite.com/2019/09/26/Java%20String/"/>
    <id>http://yoursite.com/2019/09/26/Java String/</id>
    <published>2019-09-26T03:30:40.000Z</published>
    <updated>2019-09-26T04:06:17.995Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-String-源码解析"><a href="#Java-String-源码解析" class="headerlink" title="Java String 源码解析"></a>Java String 源码解析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** The value is used for character storage. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Cache the hash code for the string */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> hash; <span class="comment">// Default to 0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** use serialVersionUID from JDK 1.0.2 for interoperability */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">6849794470754667710L</span>;</span><br><span class="line">     ...</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>从代码中可以看出String对象的值都是存储在一个常量名为value的char[] 数组，常量是不能修改的，因此对于字符串相加表达式是在不断的创建和回收对象是非常消耗性能，Jvm做了一个统一操作，在编译时将字符串相加表示，变成StringBuild表达式，防止频发的创建和销毁对象</p><p>java 栈中存储内容</p><p>​     java栈中存储基础类型，对象的引用和以及在编译时不需要通过引用而能算出来的表达式 如下示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">"hello2"</span>;</span><br><span class="line"><span class="keyword">final</span> String b = <span class="string">"hello"</span>;</span><br><span class="line">String d = <span class="string">"hello"</span>;</span><br><span class="line">String c = b + <span class="number">2</span>;</span><br><span class="line">String e = d + <span class="number">2</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java-String-源码解析&quot;&gt;&lt;a href=&quot;#Java-String-源码解析&quot; class=&quot;headerlink&quot; title=&quot;Java String 源码解析&quot;&gt;&lt;/a&gt;Java String 源码解析&lt;/h2&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>java iterator详解</title>
    <link href="http://yoursite.com/2019/09/26/java%20%20iterator/"/>
    <id>http://yoursite.com/2019/09/26/java  iterator/</id>
    <published>2019-09-26T03:04:40.000Z</published>
    <updated>2019-09-26T03:38:10.208Z</updated>
    
    <content type="html"><![CDATA[<h2 id="iterator-作用"><a href="#iterator-作用" class="headerlink" title="iterator 作用"></a>iterator 作用</h2><p>​        对于容器集合对象，循环需要知道结合对象的内部结构，对于链表结构循环的话获取莫个元素需要从链表头开始通过指针一个一个的向下寻找。迭代器的作用是循环集合对象不需要知道集合对象的具体内部结构，就能遍历。</p><h2 id="iterator-源码解析"><a href="#iterator-源码解析" class="headerlink" title="iterator 源码解析"></a>iterator 源码解析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;<span class="comment">//判断是否存在下一个对象元素</span></span><br><span class="line"></span><br><span class="line">    <span class="function">E <span class="title">next</span><span class="params">()</span></span>;<span class="comment">//获取下一个元素</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>;<span class="comment">//移除元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ArrayList实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">      <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">      <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">      Itr() &#123;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> cursor != size;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">      <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          checkForComodification();</span><br><span class="line">          <span class="keyword">int</span> i = cursor;</span><br><span class="line">          <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">          Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">          <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">          cursor = i + <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">          checkForComodification();</span><br><span class="line"></span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">              cursor = lastRet;</span><br><span class="line">              lastRet = -<span class="number">1</span>;</span><br><span class="line">              expectedModCount = modCount;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      ......</span><br></pre></td></tr></table></figure><p>从源码可以看出:</p><p>在ArrayList中modCount是当前集合的版本号，每次修改(增、删)集合都会加1；expectedModCount是当前迭代器的版本号，在迭代器实例化时初始化为modCount。我们看到在checkForComodification()方法中就是在验证modCount的值和expectedModCount的值是否相等，所以当你在调用了ArrayList.add()或者ArrayList.remove()时，只更新了modCount的状态，而迭代器中的expectedModCount未同步，因此才会导致再次调用Iterator.next()方法时抛出异常。但是为什么使用Iterator.remove()就没有问题呢？通过源码发现，在Iterator的remove()中同步了expectedModCount的值，所以当你下次再调用next()的时候，检查不会抛出异常，当向结合对象中间插入对象是，结构发生改变，需重新生成iterator对象，因此iterator 没有add方法,并且循环的过程中不能像集合对象添加元素。</p><p>Iterator 使用该机制的主要目的是为了实现ArrayList中的快速失败机制（fail-fast），在Java集合中较大一部分集合是存在快速失败机制的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;iterator-作用&quot;&gt;&lt;a href=&quot;#iterator-作用&quot; class=&quot;headerlink&quot; title=&quot;iterator 作用&quot;&gt;&lt;/a&gt;iterator 作用&lt;/h2&gt;&lt;p&gt;​        对于容器集合对象，循环需要知道结合对象的内部结构，
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>html截图 原理</title>
    <link href="http://yoursite.com/2019/09/17/html%E6%88%AA%E5%B1%8F/"/>
    <id>http://yoursite.com/2019/09/17/html截屏/</id>
    <published>2019-09-17T06:30:00.000Z</published>
    <updated>2019-09-17T07:59:16.712Z</updated>
    
    <content type="html"><![CDATA[<h2 id="canvas和svg差异"><a href="#canvas和svg差异" class="headerlink" title="canvas和svg差异"></a>canvas和svg差异</h2><p>​        Canvas:通过JavaScript来绘制2D图形。Canvas是逐像素进行渲染的，在canvas中一旦图形绘制完成，他就不会继续得到浏览器的关注，如果其位置发生变化，那么整个场景也需要重新绘制，包括任何或许已被覆盖的图形。</p><p>​          svg:一种xml描述2D图形的语言,svg基于xml，这意味着svg dom中的每个元素都可用，可以附加javascript事件，在svg中每个被绘制的图形均被视为对象。如果svg对象的属性发生变化，那么浏览器能够自动重现图形</p><p>优缺点：</p><p>   1) Canvas依赖分辨率SVG不依赖分辨率</p><p>​    2) Canvas不支持事件处理器,SVG支持事件处理器</p><p>​    3) Canvas弱的文本渲染能力,SVGA适合渲染大型区域应用程序(谷歌地图)</p><p>​    4) canvas能够以 .png 或 .jpg 格式保存结果图像</p><p>​    5) canvas适合图像密集型的游戏,其中的许多对象会被频繁重绘,SVG不适合游戏应用</p><p>​    6) 复杂度高会减慢渲染速度</p><h2 id="html-截图"><a href="#html-截图" class="headerlink" title="html 截图"></a>html 截图</h2><p>​        方法：</p><p>​            1.将html中的内容转化成canvas 然后canvas的特性转化成图片</p><p>​            2.内容转化成svg文本标签然后上传到服务器端进行转化成图片</p><p>​      </p>]]></content>
    
    <summary type="html">
    
      html截图原理
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java hashMap 原理</title>
    <link href="http://yoursite.com/2019/09/12/Java%20hashMap%20%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2019/09/12/Java hashMap 原理/</id>
    <published>2019-09-12T06:50:00.000Z</published>
    <updated>2019-09-12T07:08:35.146Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-hashMap内部结构"><a href="#1-hashMap内部结构" class="headerlink" title="1 hashMap内部结构"></a>1 hashMap内部结构</h2><p>​          Java中hashMap是K-V结构的数组，数组每个entry都是一个链式列表，hashMap中有一下几个重要属性:</p><p>容量(capacity)：hash表中桶的数量</p><p>初始化容量大小(initial capacity):初始化桶的大小</p><p>尺寸(size):当前hash表记录的数量</p><p>负载因子(load factor):负载因子等于size/capacity。负载因子为0时表示hash表为空，0.5表示半满的散列表,依此类推。轻负载的散列表具有冲突少、适宜插入与查询的特点</p><p>  除此之外，hash表里还有一个“负载极限”，“负载极限”是一个0～1的数值，“负载极限”决定了hash表的最大填满程度。当hash表中的负载因子达到指定的“负载极限”时，hash表会自动成倍地增加容量（桶的数量），并将原有的对象重新分配，放入新的桶内，这称为rehashing。</p><p>HashMap和Hashtable的构造器允许指定一个负载极限，HashMap和Hashtable默认的“负载极限”为0.75，这表明当该hash表的3/4已经被填满时，hash表会发生rehashing。</p><p>“负载极限”的默认值（0.75）是时间和空间成本上的一种折中：</p><p>​     ·   较高的“负载极限”可以降低hash表所占用的内存空间，但会增加查询数据的时间开销，而查询是最频繁的操作（HashMap的get()与put()方法都要用到查询）</p><p>​      ·   较低的“负载极限”会提高查询数据的性能，但会增加hash表所占用的内存开销</p><h2 id="2-hash算法与index算法"><a href="#2-hash算法与index算法" class="headerlink" title="2.hash算法与index算法"></a>2.hash算法与index算法</h2><p>Index算法(在数组中存放的位置)：index = hash &amp; (tab.length – 1)</p><p>Hash算法: h=(h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);具体算法 如下：</p><p><img src="https://fengbo60.github.io/images/clip_image003.jpg" alt="img"></p><p>​             HashMap的初始大小和扩容都是以2的次方来进行的，换句话说length-1换成二进制永远是全部为1，比如容量为16，则length-1为1111，大家知道位运算的规则是两个1才得1，遇0的0，也就是说length-1中的某一位为1，则对应位置的计算结果才取决于h中的对应位置（h中对应位取0,对应位结果为0，h对应位取1，对应位结果为1。这样就有两个结果），但是如果length-1中某一位为0，则不论h中对应位的数字为几，对应位结果都是0，这样就让两个h取到同一个结果，这就是hash冲突了，恰恰length-1又是全部为1的数，所以结果自然就将hash冲突最小化了(冲突少能够更宽的插入与查询)</p>]]></content>
    
    <summary type="html">
    
      java hashmap结构
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>ssr vs csr</title>
    <link href="http://yoursite.com/2019/09/02/ssr%20vs%20csr/"/>
    <id>http://yoursite.com/2019/09/02/ssr vs csr/</id>
    <published>2019-09-02T04:11:00.000Z</published>
    <updated>2019-09-02T04:13:50.083Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1、ssr"><a href="#1、ssr" class="headerlink" title="1、ssr"></a>1、ssr</h5><p>客户端渲染(scr):1.请求一个html    2.服务器端返回一个html      3.浏览器下载html中的js/css内容   4.等待js下载完成并初始化完成   5.js代码运行 并用ajax等向后端请求服务   6.等待后端数据返回   7.客户端从无到完整的 把数据显示在页面</p><hr><h5 id="2、ssr"><a href="#2、ssr" class="headerlink" title="2、ssr"></a>2、ssr</h5><p>服务器端渲染(ssr): 1.请求一个html    2.服务器端返回一个html    2.服务器请求数据   3.服务器初始化渲染   4.服务器端返回已有正确内容页面   5.客户端请求js/css文件   6.等待js现在完成  7.客户端把剩余的一部分dom元素渲染出来。(由于服务器只返回单纯展示的dom、css 其中的js事件没有在客户端进行绑定 ,最终还是需要加载js后，再次的对页面进行一次渲染称为同构,所以ssr就是更快的展示出页面的内容，先让用户能够看得到，为什么ssr对seo友好,因为搜索引擎爬虫在爬取页面信息的时候,会发送http请求来获取网页内容 而我们服务器端渲染首次的数据是后端返回的,返回的时候已经是渲染好的title、内容等信息,便于爬虫抓取内容)</p>]]></content>
    
    <summary type="html">
    
      服务器端渲染和客户端渲染
    
    </summary>
    
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Java进程常驻</title>
    <link href="http://yoursite.com/2019/08/26/%E8%BF%9B%E7%A8%8B%E5%B8%B8%E9%A9%BB/"/>
    <id>http://yoursite.com/2019/08/26/进程常驻/</id>
    <published>2019-08-26T08:04:00.000Z</published>
    <updated>2019-08-26T08:11:18.978Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h5><h2 id="最近开发一个及时通信的功能-由于没有用到第三方-自己的通信服务器端用的是netty框架-基本上十几个人的聊天应该是没有问题的，几白人没有测过，上述解决的是在线聊天，但是当用户退出程序后，怎样让用户也能像微信一样能够及时的弹出消息（消息推送），网上查找了一些方法，最开始看了android的GCM原理和苹果的ANPS原理，似乎两个原理差不多，系统自带都有一个进程监听消息，但是由于GCM原理的服务器是google的在国外。故上述方法是不可行的。然后百度，发现现在国内android系统上能够接受及时推送的消息的应用程序都是都有各自的后台永驻进程，监听消息，这也是导致android手机非常耗电的原因。居然都是这样，现在要实现离线通信，那就要保证应用程序在后台有一个永驻进程，并且这个进程要与netty服务器保持长连接。那么怎样才能保持app有一个进程永驻-网上有很多方法"><a href="#最近开发一个及时通信的功能-由于没有用到第三方-自己的通信服务器端用的是netty框架-基本上十几个人的聊天应该是没有问题的，几白人没有测过，上述解决的是在线聊天，但是当用户退出程序后，怎样让用户也能像微信一样能够及时的弹出消息（消息推送），网上查找了一些方法，最开始看了android的GCM原理和苹果的ANPS原理，似乎两个原理差不多，系统自带都有一个进程监听消息，但是由于GCM原理的服务器是google的在国外。故上述方法是不可行的。然后百度，发现现在国内android系统上能够接受及时推送的消息的应用程序都是都有各自的后台永驻进程，监听消息，这也是导致android手机非常耗电的原因。居然都是这样，现在要实现离线通信，那就要保证应用程序在后台有一个永驻进程，并且这个进程要与netty服务器保持长连接。那么怎样才能保持app有一个进程永驻-网上有很多方法" class="headerlink" title="最近开发一个及时通信的功能 由于没有用到第三方 自己的通信服务器端用的是netty框架 基本上十几个人的聊天应该是没有问题的，几白人没有测过，上述解决的是在线聊天，但是当用户退出程序后，怎样让用户也能像微信一样能够及时的弹出消息（消息推送），网上查找了一些方法，最开始看了android的GCM原理和苹果的ANPS原理，似乎两个原理差不多，系统自带都有一个进程监听消息，但是由于GCM原理的服务器是google的在国外。故上述方法是不可行的。然后百度，发现现在国内android系统上能够接受及时推送的消息的应用程序都是都有各自的后台永驻进程，监听消息，这也是导致android手机非常耗电的原因。居然都是这样，现在要实现离线通信，那就要保证应用程序在后台有一个永驻进程，并且这个进程要与netty服务器保持长连接。那么怎样才能保持app有一个进程永驻,网上有很多方法 "></a>最近开发一个及时通信的功能 由于没有用到第三方 自己的通信服务器端用的是netty框架 基本上十几个人的聊天应该是没有问题的，几白人没有测过，上述解决的是在线聊天，但是当用户退出程序后，怎样让用户也能像微信一样能够及时的弹出消息（消息推送），网上查找了一些方法，最开始看了android的GCM原理和苹果的ANPS原理，似乎两个原理差不多，系统自带都有一个进程监听消息，但是由于GCM原理的服务器是google的在国外。故上述方法是不可行的。然后百度，发现现在国内android系统上能够接受及时推送的消息的应用程序都是都有各自的后台永驻进程，监听消息，这也是导致android手机非常耗电的原因。居然都是这样，现在要实现离线通信，那就要保证应用程序在后台有一个永驻进程，并且这个进程要与netty服务器保持长连接。那么怎样才能保持app有一个进程永驻,网上有很多方法 </h2><h5 id="2、方法"><a href="#2、方法" class="headerlink" title="2、方法"></a>2、方法</h5><p>首先尝试了设置闹钟，定时唤醒，以及改变service的优先级似乎Force Close直接能杀掉后台运行的service，更不用360等一些杀毒软件，后来尝试了native保活，原理就是运行app时先开启一个c进程，c进程的功能就是不断轮询后台service是否挂掉，当挂掉时重启service，退出app时要保证后台运行的不被挂掉，首要前提是app退出后进程c没有挂掉，但是好像5.0系统以上在app退出时会连同c进程一期退出，这种方法的缺点一旦c进程挂掉，就不能再起动起来，那么后来就用到了双进程守护，运用fork()函数在c进程中创建一个父子进程，父子进程进行相互监听，不管谁挂了，就立刻起动谁，父子进程怎样进行通信，怎样传递自己的运行状态，进程间的通信无疑就要用到管道了，建立连个管道a，b，只是使用阻塞方法在另一端去读取管道，这样如果对方进程挂掉，管道会被破坏，那么另一端的读取方法就会执行返回。似乎这种方法在一些手机上可行，但是一些手机上当父进程挂掉，子进程似乎什么都不能干好像也像是挂掉一样，似乎父子进程有点，后来创建了两个不相干的进程，fifo管道在linux下可以建立在两个没有关系的进程间的双向管道，fifo是通过一个文件做通信的，对方进程挂掉之后，自己这边既不会报错也不会返回，而是一直阻塞，直到管道里面有数据。那么，当进程死的时候，自己往管道里面写数据，另一边阻塞读到数据不就可以得知这边死掉了吗，然而这要保证自己不死掉的前提下，最后用到可文件锁进行通信，创建两个a,b进程，创建a进程是对a1文件进行加锁，同时创建a2文件 ，创建b进程的时候对b1文件加锁，同时创建b2文件，当a进程发现有b2文件，删除，并读取b1的锁，当b进程发现a2文件，删除，读取a1文件的锁，只要一方读取到对方文件锁释放，就立刻启动对方的服务，双进程守护完成了上述需要的功能（service不挂掉）</p>]]></content>
    
    <summary type="html">
    
      Java进程互包机制
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Git分支的创建、删除、切换</title>
    <link href="http://yoursite.com/2019/07/01/Git%E5%88%86%E6%94%AF%E7%9A%84%E5%88%9B%E5%BB%BA%E3%80%81%E5%88%A0%E9%99%A4%E3%80%81%E5%88%87%E6%8D%A2/"/>
    <id>http://yoursite.com/2019/07/01/Git分支的创建、删除、切换/</id>
    <published>2019-07-01T02:06:00.000Z</published>
    <updated>2019-08-23T09:11:06.983Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1、本地创建新分支并切换到新分支"><a href="#1、本地创建新分支并切换到新分支" class="headerlink" title="1、本地创建新分支并切换到新分支"></a>1、本地创建新分支并切换到新分支</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> git checkout -b 分支名</span><br></pre></td></tr></table></figure><h5 id="2、提交分支到远程仓库"><a href="#2、提交分支到远程仓库" class="headerlink" title="2、提交分支到远程仓库"></a>2、提交分支到远程仓库</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> git push origin 分支名</span><br></pre></td></tr></table></figure><h5 id="3、切换分支"><a href="#3、切换分支" class="headerlink" title="3、切换分支"></a>3、切换分支</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> git checkout 分支名</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="4、删除远程分支"><a href="#4、删除远程分支" class="headerlink" title="4、删除远程分支"></a>4、删除远程分支</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> git push origin --delete 分支名</span><br></pre></td></tr></table></figure><h5 id="5、删除本地分支"><a href="#5、删除本地分支" class="headerlink" title="5、删除本地分支"></a>5、删除本地分支</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> git branch -D 分支名</span><br></pre></td></tr></table></figure><blockquote><p>Tips：其他分支命令</p></blockquote><ul><li>查看当前分支 <code>git branch</code></li><li>查看所属分支 <code>git branch -a</code></li></ul>]]></content>
    
    <summary type="html">
    
      Git分支的创建、删除、切换
    
    </summary>
    
    
      <category term="日记本" scheme="http://yoursite.com/tags/%E6%97%A5%E8%AE%B0%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>Git彻底删除历史提交记录的方法</title>
    <link href="http://yoursite.com/2019/06/05/Git%E5%BD%BB%E5%BA%95%E5%88%A0%E9%99%A4%E5%8E%86%E5%8F%B2%E6%8F%90%E4%BA%A4%E8%AE%B0%E5%BD%95%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/06/05/Git彻底删除历史提交记录的方法/</id>
    <published>2019-06-05T02:22:00.000Z</published>
    <updated>2019-08-23T09:11:06.983Z</updated>
    
    <content type="html"><![CDATA[<h6 id="1、查看Git提交记录"><a href="#1、查看Git提交记录" class="headerlink" title="1、查看Git提交记录"></a>1、查看Git提交记录</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> git log</span><br></pre></td></tr></table></figure><hr><h6 id="2、找到需要回滚到的提交点，复制它的hash值"><a href="#2、找到需要回滚到的提交点，复制它的hash值" class="headerlink" title="2、找到需要回滚到的提交点，复制它的hash值"></a>2、找到需要回滚到的提交点，复制它的hash值</h6><p><img src="/yilia-plus-demo/images/2743275-f79de5b6d7280d81.png" alt></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> git reset --hard 你复制的hash值</span><br></pre></td></tr></table></figure><a id="more"></a><hr><h6 id="3、将当前指向的head推到git"><a href="#3、将当前指向的head推到git" class="headerlink" title="3、将当前指向的head推到git"></a>3、将当前指向的head推到git</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> git push --force</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Git彻底删除历史提交记录的方法
    
    </summary>
    
    
      <category term="日记本" scheme="http://yoursite.com/tags/%E6%97%A5%E8%AE%B0%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>玩转MySQL优化命令</title>
    <link href="http://yoursite.com/2019/05/06/%E7%8E%A9%E8%BD%ACMySQL%E4%BC%98%E5%8C%96%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/05/06/玩转MySQL优化命令/</id>
    <published>2019-05-06T10:05:00.000Z</published>
    <updated>2019-08-23T09:11:06.987Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1、MySQL更改为只能本地登录"><a href="#1、MySQL更改为只能本地登录" class="headerlink" title="1、MySQL更改为只能本地登录"></a>1、MySQL更改为只能本地登录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> use mysql;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> select user,host,Password from user <span class="built_in">where</span> user=<span class="string">'root'</span>;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> delete from user <span class="built_in">where</span> user=<span class="string">'root'</span> and host=<span class="string">'%'</span>;</span></span><br></pre></td></tr></table></figure><a id="more"></a><hr><h5 id="2、MySQL授予外网登陆权限"><a href="#2、MySQL授予外网登陆权限" class="headerlink" title="2、MySQL授予外网登陆权限"></a>2、MySQL授予外网登陆权限</h5><p><code>grant all privileges on *.* to 授予外网登陆的用户名@&#39;%&#39; identified by &#39;密码&#39; WITH GRANT OPTION;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> grant all privileges on *.* to root@<span class="string">'%'</span> identified by <span class="string">'root'</span> WITH GRANT OPTION;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> flush privileges;</span></span><br></pre></td></tr></table></figure><hr><h5 id="3、更改MySQL的存储目录"><a href="#3、更改MySQL的存储目录" class="headerlink" title="3、更改MySQL的存储目录"></a>3、<a href="https://www.jianshu.com/p/81b253355ffd" target="_blank" rel="noopener">更改MySQL的存储目录</a></h5>]]></content>
    
    <summary type="html">
    
      玩转MySQL优化命令
    
    </summary>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客添加helper-live2d动态模型插件</title>
    <link href="http://yoursite.com/2019/05/05/Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0helper-live2d%E5%8A%A8%E6%80%81%E6%A8%A1%E5%9E%8B%E6%8F%92%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/05/05/Hexo博客添加helper-live2d动态模型插件/</id>
    <published>2019-05-05T08:35:00.000Z</published>
    <updated>2019-08-23T09:11:06.984Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Tips-前导必备"><a href="#Tips-前导必备" class="headerlink" title="Tips:前导必备"></a>Tips:前导必备</h5><ul><li><a href="https://zhousiwei.gitee.io/" target="_blank" rel="noopener">博主博客地址</a></li><li>博主使用的是<strong><a href="https://github.com/JoeyBling/hexo-theme-yilia-plus" target="_blank" rel="noopener">hexo-theme-yilia-plus</a></strong>主题</li><li>插件的github地址<a href="https://github.com/EYHN/hexo-helper-live2d" title="hexo-helper-live2d" target="_blank" rel="noopener">hexo-helper-live2d</a></li><li><a href="https://github.com/xiazeyu/live2d-widget-models" title="live2d模型仓库" target="_blank" rel="noopener">live2d模型仓库</a></li><li>必须有Node环境 ➡️ <a href="https://www.jianshu.com/p/f8b0a4f7a822" target="_blank" rel="noopener">Linux下安装node和npm</a></li></ul><hr><a id="more"></a><h5 id="1、安装模块"><a href="#1、安装模块" class="headerlink" title="1、安装模块"></a>1、安装模块</h5><p>&#160;&#160;&#160;&#160;<strong>在hexo根目录执行命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><hr><h5 id="2、下载模型"><a href="#2、下载模型" class="headerlink" title="2、下载模型"></a>2、下载模型</h5><p>&#160;&#160;&#160;&#160;作者各种模型包展示 ➡️ <a href="https://huaji8.top/post/live2d-plugin-2.0/" title=" hexo live2d插件 2.0 !" target="_blank" rel="noopener"> hexo live2d插件 2.0 !</a></p><blockquote><p><a href="https://github.com/xiazeyu/live2d-widget-models" title="live2d模型仓库" target="_blank" rel="noopener">live2d模型仓库</a></p></blockquote><ul><li><code>live2d-widget-model-chitose</code></li><li><code>live2d-widget-model-epsilon2_1</code></li><li><code>live2d-widget-model-gf</code></li><li><code>live2d-widget-model-haru/01</code> (use <code>npm install --save live2d-widget-model-haru</code>)</li><li><code>live2d-widget-model-haru/02</code> (use <code>npm install --save live2d-widget-model-haru</code>)</li><li><code>live2d-widget-model-haruto</code></li><li><code>live2d-widget-model-hibiki</code></li><li><code>live2d-widget-model-hijiki</code></li><li><code>live2d-widget-model-izumi</code></li><li><code>live2d-widget-model-koharu</code></li><li><code>live2d-widget-model-miku</code></li><li><code>live2d-widget-model-ni-j</code></li><li><code>live2d-widget-model-nico</code></li><li><code>live2d-widget-model-nietzsche</code></li><li><code>live2d-widget-model-nipsilon</code></li><li><code>live2d-widget-model-nito</code></li><li><code>live2d-widget-model-shizuku</code></li><li><code>live2d-widget-model-tororo</code></li><li><code>live2d-widget-model-tsumiki</code></li><li><code>live2d-widget-model-unitychan</code></li><li><code>live2d-widget-model-wanko</code></li><li><code>live2d-widget-model-z16</code></li></ul><p>使用<code>npm install {packagename}</code>安装模型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---笔者使用的模型</span><br><span class="line"><span class="meta">#</span> npm install live2d-widget-model-hibiki</span><br></pre></td></tr></table></figure><hr><h5 id="3、详细配置"><a href="#3、详细配置" class="headerlink" title="3、详细配置"></a>3、详细配置</h5><p>在Hexo的 <code>_config.yml</code> 文件或主题的 <code>_config.yml</code> 文件中添加配置.<br>参阅 <a href="https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init" target="_blank" rel="noopener">live2d-widget.js API</a></p><ul><li>博主配置文件示例<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Live2D</span></span><br><span class="line"><span class="comment">## https://github.com/EYHN/hexo-helper-live2d</span></span><br><span class="line"><span class="comment">## https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">#enable: false</span></span><br><span class="line"><span class="attr">  scriptFrom:</span> <span class="string">local</span> <span class="comment"># 默认</span></span><br><span class="line"><span class="attr">  pluginRootPath:</span> <span class="string">live2dw/</span> <span class="comment"># 插件在站点上的根目录(相对路径)</span></span><br><span class="line"><span class="attr">  pluginJsPath:</span> <span class="string">lib/</span> <span class="comment"># 脚本文件相对与插件根目录路径</span></span><br><span class="line"><span class="attr">  pluginModelPath:</span> <span class="string">assets/</span> <span class="comment"># 模型文件相对与插件根目录路径</span></span><br><span class="line">  <span class="comment"># scriptFrom: jsdelivr # jsdelivr CDN</span></span><br><span class="line">  <span class="comment"># scriptFrom: unpkg # unpkg CDN</span></span><br><span class="line">  <span class="comment"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url</span></span><br><span class="line"><span class="attr">  tagMode:</span> <span class="literal">false</span> <span class="comment"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span></span><br><span class="line"><span class="attr">  debug:</span> <span class="literal">false</span> <span class="comment"># 调试, 是否在控制台输出日志</span></span><br><span class="line"><span class="attr">  model:</span></span><br><span class="line"><span class="attr">    use:</span> <span class="string">live2d-widget-model-hibiki</span></span><br><span class="line">    <span class="comment"># use: live2d-widget-model-wanko # npm-module package name</span></span><br><span class="line">    <span class="comment"># use: wanko # 博客根目录/live2d_models/ 下的目录名</span></span><br><span class="line">    <span class="comment"># use: ./wives/wanko # 相对于博客根目录的路径</span></span><br><span class="line">    <span class="comment"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span></span><br><span class="line"><span class="attr">  display:</span></span><br><span class="line"><span class="attr">    position:</span> <span class="string">right</span></span><br><span class="line"><span class="attr">    width:</span> <span class="number">145</span></span><br><span class="line"><span class="attr">    height:</span> <span class="number">315</span></span><br><span class="line"><span class="attr">  mobile:</span></span><br><span class="line"><span class="attr">    show:</span> <span class="literal">true</span> <span class="comment"># 是否在移动设备上显示</span></span><br><span class="line"><span class="attr">    scale:</span> <span class="number">0.5</span> <span class="comment"># 移动设备上的缩放       </span></span><br><span class="line"><span class="attr">  react:</span></span><br><span class="line"><span class="attr">    opacityDefault:</span> <span class="number">0.7</span></span><br><span class="line"><span class="attr">    opacityOnHover:</span> <span class="number">0.8</span></span><br></pre></td></tr></table></figure></li></ul><hr><h5 id="4、作者寄语"><a href="#4、作者寄语" class="headerlink" title="4、作者寄语"></a>4、作者寄语</h5><blockquote><p>Everything is ok. But you have to do by yourself.</p></blockquote>]]></content>
    
    <summary type="html">
    
      Hexo博客添加helper-live2d动态模型插件
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>vi/vim 粘贴内容时,保留原文件内容格式</title>
    <link href="http://yoursite.com/2019/05/05/vi%E6%88%96vim%E7%B2%98%E8%B4%B4%E5%86%85%E5%AE%B9%E6%97%B6,%E4%BF%9D%E7%95%99%E5%8E%9F%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E6%A0%BC%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/05/05/vi或vim粘贴内容时,保留原文件内容格式/</id>
    <published>2019-05-05T07:33:00.000Z</published>
    <updated>2019-08-23T09:11:06.986Z</updated>
    
    <content type="html"><![CDATA[<p>在vi/vim普通模式下执行<code>:set paste</code>命令，再按 i 插入就会保留原文件格式</p><ul><li><code>:set paste</code> 打开粘贴命令</li><li><code>:set nopaste</code> 关闭命令</li><li><code>:h paste</code> 帮助</li></ul>]]></content>
    
    <summary type="html">
    
      vi/vim 粘贴内容时,保留原文件内容格式
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>新增Hexo博客文章置顶功能</title>
    <link href="http://yoursite.com/2019/02/25/%E6%96%B0%E5%A2%9EHexo%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6%E5%8A%9F%E8%83%BD/"/>
    <id>http://yoursite.com/2019/02/25/新增Hexo博客文章置顶功能/</id>
    <published>2019-02-25T03:40:00.000Z</published>
    <updated>2019-08-23T09:11:06.986Z</updated>
    
    <content type="html"><![CDATA[<h5 id="修改Hexo文件夹下的node-modules-hexo-generator-index-lib-generator-js"><a href="#修改Hexo文件夹下的node-modules-hexo-generator-index-lib-generator-js" class="headerlink" title="修改Hexo文件夹下的node_modules/hexo-generator-index/lib/generator.js"></a>修改Hexo文件夹下的<code>node_modules/hexo-generator-index/lib/generator.js</code></h5><p>需要添加的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123;</span><br><span class="line">          <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><a id="more"></a><p>以下是最终的generator.js内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">'hexo-pagination'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</span><br><span class="line">  <span class="keyword">var</span> posts = locals.posts.sort(config.index_generator.order_by);</span><br><span class="line"></span><br><span class="line">  posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123;</span><br><span class="line">          <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">'page'</span>;</span><br><span class="line">  <span class="keyword">var</span> path = config.index_generator.path || <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> pagination(path, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</span><br><span class="line">    format: paginationDir + <span class="string">'/%d/'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><p>如何使用：在需要置顶的文章添加top属性即可，排序从小到大<img src="/yilia-plus-demo/images/2743275-85427a7ca0fa1c91.png" alt></p><hr><p>博客效果：<img src="/yilia-plus-demo/images/2743275-d3826b5a2d621b67.png" alt></p><hr><h5 id="Tips-常用hexo命令"><a href="#Tips-常用hexo命令" class="headerlink" title="Tips:常用hexo命令"></a>Tips:常用hexo命令</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo n == hexo new</span></span><br><span class="line"><span class="comment"># hexo g == 生成</span></span><br><span class="line"><span class="comment"># hexo s == 启动服务</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      新增Hexo博客文章置顶功能
    
    </summary>
    
    
      <category term="日记本" scheme="http://yoursite.com/tags/%E6%97%A5%E8%AE%B0%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>IDEA设置后端代码开发规范</title>
    <link href="http://yoursite.com/2019/01/23/IDEA%E8%AE%BE%E7%BD%AE%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2019/01/23/IDEA设置后端代码开发规范/</id>
    <published>2019-01-23T02:33:00.000Z</published>
    <updated>2019-08-23T09:11:06.984Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1、IDEA-配置svn"><a href="#1、IDEA-配置svn" class="headerlink" title="1、IDEA 配置svn"></a>1、IDEA 配置svn</h5><p>提交svn报错：<img src="/yilia-plus-demo/images/2743275-ef2b3fcbeb66c50b.png" alt></p><a id="more"></a><h6 id="1-1、下载："><a href="#1-1、下载：" class="headerlink" title="1.1、下载："></a>1.1、下载：</h6><p><a href="https://www.visualsvn.com/downloads/" target="_blank" rel="noopener">https://www.visualsvn.com/downloads/</a><br><img src="/yilia-plus-demo/images/2743275-44ad2e9c56003729.png" alt></p><h6 id="1-2、修改IDEA配置指向的路径"><a href="#1-2、修改IDEA配置指向的路径" class="headerlink" title="1.2、修改IDEA配置指向的路径"></a>1.2、修改IDEA配置指向的路径</h6><h2 id><a href="#" class="headerlink" title></a><img src="/yilia-plus-demo/images/2743275-42eacfa5fcf4012b.png" alt></h2><h5 id="2、IDEA-设置-Tab-键为-4-个空格"><a href="#2、IDEA-设置-Tab-键为-4-个空格" class="headerlink" title="2、IDEA 设置 Tab 键为 4 个空格"></a>2、IDEA 设置 Tab 键为 4 个空格</h5><p>Scheme 选择 <strong><em>Project</em></strong> ,在下面把取消勾选  <strong><em>Use tab character</em></strong><br><img src="/yilia-plus-demo/images/2743275-206f9205699535f0.png" alt></p><hr><h5 id="3、IDEA-设置编码格式为-UTF-8"><a href="#3、IDEA-设置编码格式为-UTF-8" class="headerlink" title="3、IDEA 设置编码格式为 UTF-8"></a>3、IDEA 设置编码格式为 UTF-8</h5><p><img src="/yilia-plus-demo/images/2743275-7552ebdc7e6ca13a.png" alt></p><hr><h5 id="4、IDEA-设置换行符为-Unix-编码格式"><a href="#4、IDEA-设置换行符为-Unix-编码格式" class="headerlink" title="4、IDEA 设置换行符为 Unix 编码格式"></a>4、IDEA 设置换行符为 Unix 编码格式</h5><p><img src="/yilia-plus-demo/images/2743275-753b9ab5b4add45a.png" alt></p><hr><h5 id="5、IDEA-设置类注释模板"><a href="#5、IDEA-设置类注释模板" class="headerlink" title="5、IDEA 设置类注释模板"></a>5、IDEA 设置类注释模板</h5><p><img src="/yilia-plus-demo/images/2743275-5dc31e3d9d0a461e.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Created by 思伟 on $&#123;DATE&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      IDEA设置后端代码开发规范
    
    </summary>
    
    
      <category term="日记本" scheme="http://yoursite.com/tags/%E6%97%A5%E8%AE%B0%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 2.0 更新记录</title>
    <link href="http://yoursite.com/2018/08/21/SpringBoot%202.0%20%E6%9B%B4%E6%96%B0%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2018/08/21/SpringBoot 2.0 更新记录/</id>
    <published>2018-08-21T02:43:00.000Z</published>
    <updated>2019-08-23T09:11:06.986Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、Spring-Boot-2-0-要求Java-版本必须8以上"><a href="#1、Spring-Boot-2-0-要求Java-版本必须8以上" class="headerlink" title="1、Spring Boot 2.0 要求Java 版本必须8以上"></a>1、Spring Boot 2.0 要求Java 版本必须8以上</h4><h4 id="2、配置属性的重定位"><a href="#2、配置属性的重定位" class="headerlink" title="2、配置属性的重定位"></a>2、配置属性的重定位</h4><table><thead><tr><th>Old property</th><th>New property</th></tr></thead><tbody><tr><td>server.context-path</td><td>server.servlet.context-path</td></tr><tr><td>server.context-parameters.*</td><td>server.servlet.context-parameters.*</td></tr><tr><td>server.jsp.class-name</td><td>server.servlet.jsp.class-name</td></tr><tr><td>server.jsp.init-parameters.*</td><td>server.servlet.jsp.init-parameters.*</td></tr><tr><td>server.jsp.registered</td><td>server.servlet.jsp.registered</td></tr><tr><td>server.servlet-path</td><td>server.servlet.path</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      SpringBoot 2.0 更新记录
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Linux下更改MySQL的存储目录</title>
    <link href="http://yoursite.com/2018/08/06/Linux%E4%B8%8B%E6%9B%B4%E6%94%B9MySQL%E7%9A%84%E5%AD%98%E5%82%A8%E7%9B%AE%E5%BD%95/"/>
    <id>http://yoursite.com/2018/08/06/Linux下更改MySQL的存储目录/</id>
    <published>2018-08-06T09:06:00.000Z</published>
    <updated>2019-08-23T09:11:06.985Z</updated>
    
    <content type="html"><![CDATA[<h5 id="重要步骤：一定要先停止Mysql"><a href="#重要步骤：一定要先停止Mysql" class="headerlink" title="重要步骤：一定要先停止Mysql"></a>重要步骤：一定要先停止Mysql</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> service mysqld stop</span><br></pre></td></tr></table></figure><h5 id="1、创建目标文件夹"><a href="#1、创建目标文件夹" class="headerlink" title="1、创建目标文件夹"></a>1、创建目标文件夹</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> mkdir -p /data/mysql</span><br><span class="line"><span class="meta">#</span> chown -R mysql.mysql /data/mysql/</span><br></pre></td></tr></table></figure><h5 id="2、迁移命令"><a href="#2、迁移命令" class="headerlink" title="2、迁移命令"></a>2、迁移命令</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> mysql_install_db --user=mysql --basedir=/usr --datadir=/data/mysql</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="3、为避免麻烦，删掉原文件夹-var-lib-mysql"><a href="#3、为避免麻烦，删掉原文件夹-var-lib-mysql" class="headerlink" title="3、为避免麻烦，删掉原文件夹/var/lib/mysql"></a>3、为避免麻烦，删掉原文件夹/var/lib/mysql</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> rm -rf /var/lib/mysql/*</span><br></pre></td></tr></table></figure><h5 id="4、修改-etc-my-cnf配置文件"><a href="#4、修改-etc-my-cnf配置文件" class="headerlink" title="4、修改/etc/my.cnf配置文件"></a>4、修改/etc/my.cnf配置文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">datadir=/data/mysql</span><br></pre></td></tr></table></figure><h5 id="5、启动mysql"><a href="#5、启动mysql" class="headerlink" title="5、启动mysql"></a>5、启动mysql</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> chkconfig mysqld on</span><br><span class="line"><span class="meta">#</span> service mysqld restart</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Linux下更改MySQL的存储目录
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
</feed>
